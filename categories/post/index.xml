<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>post on mingyuchoo.github.io</title>
    <link>https://mingyuchoo.github.io/categories/post/</link>
    <description>Recent content in post on mingyuchoo.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://mingyuchoo.github.io/categories/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithm Problem Solving</title>
      <link>https://mingyuchoo.github.io/posts/2020-10-12-algorithm-problem-solving/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-10-12-algorithm-problem-solving/</guid>
      <description>알고리즘 문제 해결 순서 문제 분석 문제에서 목표 추출 문제 해결 기본 아이디어 도출 기본 아이디어 구체화 구현 순서 구상 5.1 입력 5.2 처리 순서 5.3 반복 조건 5.4 종료 조건 5.5 출력 구현 방법 선택 5.1 라이브러리 이용 5.2 함수 이용 5.3 메소드 이용 5.4 직접 구현 </description>
    </item>
    
    <item>
      <title>AWS Services</title>
      <link>https://mingyuchoo.github.io/posts/2022-07-20-aws-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2022-07-20-aws-services/</guid>
      <description>AWS Services AWS Major Services Computing Services Amazon EC2(Elastic Compute Cloud) Amazon Auto Scaling Amazon Lightsail Amazon WorkSpaces Networking Services Amazon Route 53 Amazon VPC(Virtual Private Cloud) AWS Direct Connect Amazon ELB(Elasitc Load Balancer) Storage Services Amazon S3(Simple Storage Services) Amazon Glacier Amazon EBS(Elasitc Block Storage) AWS Storage Gateway AWS Snowball Database Services Amazon RDS(Relational Database Services) Amazon DynamoDB Amazon ElasticCache Analytics Services Amazon Kinesis Amazon Redshift Amazon EMR Application Services Amazon CloudSearch Amzaon SES(Simple Email Services) Amazon Elastic Transcoder </description>
    </item>
    
    <item>
      <title>Bash Tips &amp; Tricks</title>
      <link>https://mingyuchoo.github.io/posts/2020-05-20-bash-tips-and-tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-05-20-bash-tips-and-tricks/</guid>
      <description>한 번에 모든 프로젝트에 ncu 로 모듈 업데이트하기 for directory in $(ls) do pushd $directory cd $directory ncu -u popd done 특정 디렉터리의 자식 디렉터리를 탐색하며 특정 파일을 삭제하기 for directory in $(ls) do pushd $directory cd $directory rm package-lock.json popd done Java 프로세스 목록 Kill for pid in $(ps aux | grep java | awk &amp;#39;{print $2}&amp;#39;) do kill $pid done 메모리 사용량 순서로 프로세스 목록 보기 ps -ef --sort -rss | head -n 11 </description>
    </item>
    
    <item>
      <title>BFS</title>
      <link>https://mingyuchoo.github.io/posts/2020-10-12-algorithm-bfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-10-12-algorithm-bfs/</guid>
      <description>BFS(깊이 우선 탐색, Breadth First Search) 정의 Breadth First Search의 약자로 너비 우선 탐색을 뜻한다. 버텍스(vertex)의 형제들(siblings)을 우선으로 탐색한다.
유형 특징 거의 빠지지 않고 출제된다. 기본 코드를 외우고 들어가는 것이 좋다.
문제 식별 현재 위치에서 뻗어 나가되, 영역(DFS)보다 거리(BFS)를 목표로 할 때 적용할 수 있다.
상하좌우로 좌표를 이동하여 미로를 탈출하는 게임인데 목표가 최소 이동 수를 구는 상황일 때 적용할 수 있다.
출제 특징 상하좌우, 동서남북, 등의 좌표가 제시되는 경우가 많다.</description>
    </item>
    
    <item>
      <title>Binary Search</title>
      <link>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-binary-search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-binary-search/</guid>
      <description>이진 탐색이란 데이터가 정렬돼 있는 배열에서 특정한 값을 찾아내는 알고리즘이다. 배열의 중간에 있는 임의의 값을 선택하여 찾고자 하는 값 X와 비교한다. X가 중간 값보다 작으면 중간 값을 기준으로 좌측의 데이터들을 대상으로, X가 중간값보다 크면 배열의 우측을 대상으로 다시 탐색한다. 동일한 방법으로 다시 중간의 값을 임의로 선택하고 비교한다. 해당 값을 찾을 때까지 이 과정을 반복한다.</description>
    </item>
    
    <item>
      <title>Capability Level</title>
      <link>https://mingyuchoo.github.io/posts/2020-05-20-capability-level/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-05-20-capability-level/</guid>
      <description>https://www.skills-base.com/competency-framework Initial Managed Defined Quantitatively Managed Optimizing Level 1. Initial Unpredictable and reactive Processes unpredictable, poorly controlled and reactive Work gets completed but is often delayed and over budget.
Ad hoc
Fragmented adoption
Lack of measures
Lack of records
Uniformed decision making
개인 중심
결과를 예측할 수 없음
조직의 표준에 따라오지 못함
외부의 요청에 대해서만 단편적인 업무를 수행하는 수준
단편적인 결과를 냄
하는 일에 기록을 남기지 않음
혼자서 의사결정을 할 수 없음</description>
    </item>
    
    <item>
      <title>Coding Test Website List</title>
      <link>https://mingyuchoo.github.io/posts/2020-10-06-coding-test-site/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-10-06-coding-test-site/</guid>
      <description>코딩 테스트 웹사이트 해외 코드포스 [https://codeforces.com] 탑코더 [https://topcoder.com] 릿코드 [https://leetcode.com] 코드셰프 [https://codechef.com] 국내 백준 온라인 저지 [https://acmicpc.net] 코드업 [https://codeup.kr] 프로그래머스 [https://programmers.co.kr] SW Expert Academy [https://swexpertacademy.com] 알고리즘 문제 풀이 웹사이트 코드 시그널 [https://app.codesignal.com] 코드포스 [https://codeforces.com] 정보올림피아드 [http://www.jungol.co.kr] </description>
    </item>
    
    <item>
      <title>DFS</title>
      <link>https://mingyuchoo.github.io/posts/2020-10-12-algorithm-dfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-10-12-algorithm-dfs/</guid>
      <description>DFS(깊이 우선 탐색, Depth First Search) 정의 Depth First Search의 약자로 깊이 우선 탐색을 뜻한다. 버텍스(vertex)의 자식들(children)을 우선으로 탐색한다.
유형 특징 거의 빠지지 않고 출제된다. 기본 코드를 외우고 들어가는 것이 좋다.
문제 식별 묶음을 찾아주는 프로그램은 DFS를 이용한다.
출제 특징 상하좌우, 동서남북, 등의 좌표가 제시되는 경우가 많다.
제시된 공간을 넘어갈 때 처리하는 상황이 주어질 수 있다.
재귀호출을 해야할 상황이 주어진다.
예제 영역 개수 구하기 연구소 바이러스 확산 괄호 변환 연산자 끼워넣기 </description>
    </item>
    
    <item>
      <title>Dynamic Programming</title>
      <link>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-dynamic-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-dynamic-programming/</guid>
      <description>동적계획법(Dynamic Programming)은 문제의 최적해를 구하거나 답의 개수를 세는 과정에 사용할 수 있는 알고리즘 설계 기법입니다. 동적계획법을 사용하면 불필요한 계산을 줄이고, 효율적으로 최적해를 찾을 수 있습니다.
동적계획법은 “전체 문제를 작은 문제로 단순화한 다음 점화식으로 만들어 재귀적인 구조를 활용해서 전체 문제를 해결하는 방식” 입니다.</description>
    </item>
    
    <item>
      <title>Full search | Simulation</title>
      <link>https://mingyuchoo.github.io/posts/2020-10-07-algorithm-full-search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-10-07-algorithm-full-search/</guid>
      <description>완전 탐색(Full search) 또는 시뮬레이션(Simulation) 정의 완전 탐색은 모든 경우의 수를 주저 없이 다 계산하는 해결 방법을 의미하고, 시뮬레이션은 문제에서 제시한 알고리즘을 한 단계씩 차례대로 직접 수행해야 하는 문제 유형이다.
유형 특징 사용하는 프로그래밍에 문법에 능숙하고 코드 작성 속도를 높여야 한다.
제시한 메모리 사용량보다 더 적게 메모리를 사용해야 통과할 수 있어 시간 제한과 데이터 개수를 먼저 확인한 뒤 어느 정도의 시간 복잡도와 공간 복잡도로 알고리즘을 작정해야 할지 판단해야 한다.
Pypy3을 선택하면 파이썬3과 동일한 코드로 빠른 실행시간을 얻을 수 있다.</description>
    </item>
    
    <item>
      <title>Graph</title>
      <link>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-graph/</guid>
      <description>그래프는 트리와 비슷하게 노드와 엣지로 구성되어 있습니다. 그래프에서는 노드를 버텍스, 엣지를 아크라고 부릅니다. 사실 그냥 노드랑 엣지로 불러도 상관 없지만, 있어보이려면 버텍스와 아크로 부르도록 합시다.
그래프는 버텍스 간에 여러 개의 아크가 존재할 수 있습니다. 다른 버텍스에서부터 오는 아크의 개수를 In-degree, 다른 버텍스로 가는 아크의 개수를 Out-degree라고 부릅니다. 또한 방향성을 띄고 있는지에 따라 방향 그래프와 무방향 그래프로 나뉩니다.</description>
    </item>
    
    <item>
      <title>Greedy</title>
      <link>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-greedy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-greedy/</guid>
      <description>그리디 알고리즘 (Greedy algorithm) 정의 현재 상황에서 지금 당장 좋은 것만 고르는 방법. 이렇게 각 단계에서 최선의 선택을 한 것이 전체적으로도 최선이길 바라는 알고리즘이다.
유형 특징 그리디(greedy) 알고리즘 문제는 매우 다향해서 암기한다고 잘 풀 수 있는 알고리즘 유형이 아니다. 문제를 풀기 위한 최소한의 창의적인 아이디어를 떠올릴 수 있는 능력을 요구한다. 많은 문제를 접해보고 문제를 풀어보는 훈련을 해야 한다.
문제 식별 단순히 현재 상황에서 가장 좋아 보이는 것만을 선택해도 문제를 풀수 있는지 파악한다.</description>
    </item>
    
    <item>
      <title>Hash</title>
      <link>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-hash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-hash/</guid>
      <description>해시는 Key-value 쌍으로 데이터를 저장하는 자료구조입니다.</description>
    </item>
    
    <item>
      <title>Heap</title>
      <link>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-heap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-heap/</guid>
      <description>힙은 트리의 일종이지만 조금 특이한 성질을 가지고 있습니다. 힙에는 최대힙과 최소힙이 있는데, 일단 최대힙의 정의는 다음과 같습니다.
완전 트리이면서 Root가 모든 경우에 자식들보다 커야한다.</description>
    </item>
    
    <item>
      <title>Install sticky note in Ubunut</title>
      <link>https://mingyuchoo.github.io/posts/2019-07-27-ubuntu-install-sticky-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2019-07-27-ubuntu-install-sticky-notes/</guid>
      <description>sudo add-apt-repository ppa:umang/indicator-stickynotes sudo apt-get update sudo apt-get install indicator-stickynotes </description>
    </item>
    
    <item>
      <title>Javascript Development Tools &amp; Frameorks, &amp; Libraries</title>
      <link>https://mingyuchoo.github.io/posts/2019-07-29-javascript-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2019-07-29-javascript-tools/</guid>
      <description>Package management Nodejs Framework Bundler Testing Framework sinon Mocking library https://sinonjs.org supports spy, stub, and fake Istanbul (nyc) Test coverage https://istanbul.js.org </description>
    </item>
    
    <item>
      <title>MongoDB Modeling Pattern</title>
      <link>https://mingyuchoo.github.io/posts/2021-01-02-mongodb-modeling-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2021-01-02-mongodb-modeling-pattern/</guid>
      <description>요약 reference - []https://www.mongodb.com/blog/post/building-with-patterns-a-summary
Appproximation pattern Attribute pattern Bucket pattern Computed pattern Document Versioning pattern Extended Reference pattern Outlier pattern Pre-allocated pattern Polymorphic pattern Schema Versioning pattern Subset pattern Tree and Graph pattern Appproximation pattern reference - https://www.mongodb.com/blog/post/building-with-patterns-the-approximation-pattern
Attribute pattern reference - https://www.mongodb.com/blog/post/building-with-patterns-the-attribute-pattern
Bucket pattern reference - https://www.mongodb.com/blog/post/building-with-patterns-the-bucket-pattern
Computed pattern reference - https://www.mongodb.com/blog/post/building-with-patterns-the-computed-pattern
Document Versioning pattern reference - https://www.mongodb.com/blog/post/building-with-patterns-the-document-versioning-pattern
Extended Reference pattern reference - https://www.mongodb.com/blog/post/building-with-patterns-the-extended-reference-pattern
Outlier pattern reference - https://www.mongodb.com/blog/post/building-with-patterns-the-outlier-pattern</description>
    </item>
    
    <item>
      <title>MVP, MMF, MMP, and MMR</title>
      <link>https://mingyuchoo.github.io/posts/2020-05-20-mvp-mmf-mmp-mmr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-05-20-mvp-mmf-mmp-mmr/</guid>
      <description>MVP(Minimum Viable Product) MMF(Minimum Marketable Feature) MMR(Minimum Marketable Release) MMP(Minimum Marketable Product) MVP Minimum Viable Product
MVP is often a prototype aimed at getting a validated learning about a subset of users. Created to explore a hypothesis. Often a functional prototype where some functionality is simulated or performed manually. Your aim is to do just enough work to get something in front of potential end users to learn what they really want.</description>
    </item>
    
    <item>
      <title>Nodejs 패키지 업데이트</title>
      <link>https://mingyuchoo.github.io/posts/2019-07-27-npm-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2019-07-27-npm-update/</guid>
      <description>npm outdated npm update --save npm update --save-dev </description>
    </item>
    
    <item>
      <title>Open Source Fonts</title>
      <link>https://mingyuchoo.github.io/posts/2021-06-27-opensource-fonts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2021-06-27-opensource-fonts/</guid>
      <description> FiraCode - https://github.com/tonsky/FiraCode Hasklig - https://github.com/i-tu/Hasklig Monoid - http://larsenwork.com/monoid/ Iosevka - https://github.com/be5invis/Iosevka CascadiaCode - https://github.com/microsoft/cascadia-code </description>
    </item>
    
    <item>
      <title>Python Package Update</title>
      <link>https://mingyuchoo.github.io/posts/2019-07-27-python-package-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2019-07-27-python-package-update/</guid>
      <description>Python 패키지 설치 I cannot install or upgrade pip &amp;ldquo;ssl error&amp;rdquo; pip install --upgrade pip --trusted-host pypi.org --trusted-host files.pythonhosted.org 패키지 업데이트 하기 오래된 패키지 업데이트하기 1 pip list --outdated --format=freeze | grep -v &amp;#39;^\-e&amp;#39; | cut -d = -f 1 | xargs -n1 pip install -U 오래된 패키지 업데이트하기 2 for package in $(pip list --outdated | awk &amp;#39;{ print $1}&amp;#39;) do pip install $package --upgrade --trusted-host pypi.org --trusted-host files.pythonhosted.org done requirements.</description>
    </item>
    
    <item>
      <title>Python tips and tricks</title>
      <link>https://mingyuchoo.github.io/posts/2019-05-23-python-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2019-05-23-python-tips/</guid>
      <description>파이썬에서 Underscore( _ ) 역할 Using in Interpreter Ignoring Value Use in Looping Separating Dicts of Numbers Naming using Underscore ( _ ) Single Pre Underscores _variable Single Post Underscores variable_ Double Pre Underscores __variable Double Pre and Post Underscores *variable Asterisk(*)의 사용법 &amp;gt;&amp;gt;&amp;gt; 2 * 3 6 &amp;gt;&amp;gt;&amp;gt; 2 ** 3 8 &amp;gt;&amp;gt;&amp;gt; 1.414 * 1.414 1.9993959999999997 &amp;gt;&amp;gt;&amp;gt; 1.414 ** 2 1.9993959999999997 # 리스트 초기화 예제 &amp;gt;&amp;gt;&amp;gt; zeros_list = [0] * 100 &amp;gt;&amp;gt;&amp;gt; zeros_list [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] # 튜플 초기화 예제 &amp;gt;&amp;gt;&amp;gt; zeros_tuple = (0,) * 100 &amp;gt;&amp;gt;&amp;gt; zeros_tuple (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) For using the variadic arguments using the asterisk(*) # A function that shows the results of running competitions consisting of 2 to 4 runners.</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-search/</guid>
      <description>방대한 데이터에서 목적에 맞는 데이터를 찾아내기 위한 알고리즘.</description>
    </item>
    
    <item>
      <title>Shortest Path; Dijkstra</title>
      <link>https://mingyuchoo.github.io/posts/2020-10-06-algorithm-shortest-path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-10-06-algorithm-shortest-path/</guid>
      <description>최단 거리; 데이크스트라(Dijkstra) 정의 컴퓨터 과학에서, 데이크스트라 알고리즘(영어: Dijkstra algorithm) 또는 다익스트라 알고리즘은 도로 교통망 같은 곳에서 나타날 수 있는 그래프에서 꼭짓점 간의 최단 경로를 찾는 알고리즘이다.
이 알고리즘은 변형이 많다. 데이크스트라의 원래 알고리즘은 두 꼭짓점 간의 가장 짧은 경로를 찾는 알고리즘이지만, 더 일반적인 변형은 한 꼭짓점을 &amp;ldquo;소스&amp;rdquo; 꼭짓점으로 고정하고 그래프의 다른 모든 꼭짓점까지의 최단경로를 찾는 알고리즘으로 최단 경로 트리를 만드는 것이다.
어떤 분야, 특히 인공 지능 분야에서, 데이크스트라 알고리즘이나 그 변형은 균일 비용 탐색으로 알려져 있으며 최상 우선 탐색의 일반적인 아이디어의 예시로 공식화 되어있다.</description>
    </item>
    
    <item>
      <title>Sort</title>
      <link>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-sort/</guid>
      <description>컴퓨터 분야에서 중요시되는 문제 가운데 하나로 어떤 데이터들이 주어졌을 때 이를 정해진 순서대로 나열하는 문제이다. 실제 컴퓨터 분야에서 사용하는 데이터의 경우 숫자의 순서나 어휘의 순서대로 정렬한 다음 사용해야 되는 경우가 거의 항상 발생하는데 이걸 얼마나 효과적으로 해결할 수 있느냐가 정렬 문제의 핵심이다.</description>
    </item>
    
    <item>
      <title>Spotless for Java Auto formatting</title>
      <link>https://mingyuchoo.github.io/posts/2020-05-20-spotless/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-05-20-spotless/</guid>
      <description>https://github.com/diffplug/spotless Gradle Settings Using the plugins DSL plugins { id &amp;#34;com.diffplug.gradle.spotless&amp;#34; version &amp;#34;3.30.0&amp;#34; } ... spotless { java { importOrder &amp;#39;java&amp;#39;, &amp;#39;javax&amp;#39;, &amp;#39;org&amp;#39;, &amp;#39;com&amp;#39;, &amp;#39;&amp;#39;	// A sequence of package names googleJavaFormat(&amp;#34;1.7&amp;#34;).aosp() removeUnusedImports() // removes any unused imports indentWithSpaces(4) // default 4 trimTrailingWhitespace() endWithNewline() } format &amp;#39;misc&amp;#39;, { target &amp;#39;**/*.yml&amp;#39;, &amp;#39;**/*.gradle&amp;#39;, &amp;#39;**/*.md&amp;#39;, &amp;#39;**/.gitignore&amp;#39; indentWithSpaces(2) trimTrailingWhitespace() endWithNewline() } } ... Using legacy plugin application buildscript { ... dependencies { classpath(&amp;#39;com.diffplug.spotless:spotless-plugin-gradle:3.30.0&amp;#39;) } } .</description>
    </item>
    
    <item>
      <title>Stack/Queue</title>
      <link>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-stack-queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-05-24-algorithm-stack-queue/</guid>
      <description>LIFO, FIFO, push &amp;amp; pop! 스택과 큐를 이용합니다.
후입선출(後入先出, Last In First Out; LIFO)[1]의 자료구조.데이터 저장소에서 새로 들어오는 데이터의 위치가 저장소의 끝 부분(Top 혹은 Top pointer라고 한다)이고, 써먹기 위해 내보내는 데이터 역시 저장소의 끄트머리에서 나간다. 입력은 push, 출력은 pop이다. peek는 Top의 위치에 있는 데이터를 확인하는 것을 말한다.
선입선출(先入先出, First In First Out; FIFO)의 자료구조. 대기열이라고도 한다. Queue라는 단어 자체가 표 같은 것을 구매하기 위해 줄서는 것을 의미한다.</description>
    </item>
    
    <item>
      <title>TypeScript Basic</title>
      <link>https://mingyuchoo.github.io/posts/2019-07-29-typescript-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2019-07-29-typescript-testing/</guid>
      <description>Types Basic Types boolean number string [], Array [Type, Type] {,,,} any, any[] void undefined, null naver Boolean let isDone: boolean = false; Number let decimal: number = 6; String let color: string = &amp;#34;blue&amp;#34;; Array let list: number[] = [1, 2, 3]; let list: Array&amp;lt;number&amp;gt; = [1, 2, 3]; Tuple let x: [string, number]; Enum enum Color {Red, Green, Blue} let c Color = Color.Green; Any let notSure: any = 4; let list: any[] = [1, true, &amp;#34;free&amp;#34;]; Void let unusable: void = undefined; Null and Undefined let u: undefined = undefined; let n: null = null; Never function error(message: string): never { throw new Error(message); } function infiniteLoop(): never { while (true) { } } Object declare function create(o: object | null): void; create({ prop: 0 }); // OK create(null); // OK create(42); // Error create(&amp;#34;string&amp;#34;); // Error create(false); // Error create(undefined); // Error </description>
    </item>
    
    <item>
      <title>TypeScript Tips &amp; Tech</title>
      <link>https://mingyuchoo.github.io/posts/2020-12-28-typescript-tips-tech/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-12-28-typescript-tips-tech/</guid>
      <description>*.d.ts 파일 안에 있는 타입과 인터페이스를 import 구문 없이 사용하기 가장 좋은 위치는 src 디렉토리와 상관없이 사용할 수 있는 그 상단 디렉토리이다. 그 위치에 @types라고 디렉토리를 만든다. 디렉토리 이름은 마음대로 정한다. 파일 이름은 *.d.ts 형태로 만든다. 그 내부 코드에 declare module &amp;quot;&amp;lt;모듈명&amp;gt;&amp;quot; { ... } 안에 타입과 인터페이스 등을 선언한다. import 구문 없이 타입과 인터페이스를 사용하고 싶으면 declare global { ... } 로 선언해야 한다. </description>
    </item>
    
    <item>
      <title>TypeScript Type Declaration</title>
      <link>https://mingyuchoo.github.io/posts/2021-01-10-typescript-type-declaration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2021-01-10-typescript-type-declaration/</guid>
      <description>타입 선언 자동 생성 tsconfig.json 파일에 아래와 같이 옵션 2개를 설정합니다.
{ &amp;#34;compilerOptions&amp;#34;: { &amp;#34;declaration&amp;#34;: true, &amp;#34;declarationDir&amp;#34;: &amp;#34;@types&amp;#34;, ... }, } tsc 명령어 컴파일하면 tsconfig.json 파일과 같은 위치 디렉토리에 @types 디렉토리가 만들어지고 그 아래 *.d.ts 파일이 자동으로 만들어집니다.</description>
    </item>
    
    <item>
      <title>User Story Examples</title>
      <link>https://mingyuchoo.github.io/posts/2020-05-20-user-story-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2020-05-20-user-story-example/</guid>
      <description>Example 1 @tv @wip @manual Feature: BBC TV Brands Homepage As a user of BBC website I want to have a web page for every TV brand of the BBC So that I can get all the informaiton about my favorite Brand Background: Brand is available Given: BBC TV brand is available to public or coming soon Scenario Outline: TV Brand page Given I am on the BBC TV &amp;lt;brand&amp;gt; page When the bran page loads Then I should see &amp;#34;One iPlayer&amp;#34; And I should see clips, galleries, tweeks and related links But I should not see &amp;#34;On Radio&amp;#34; Examples: List of the TV Brand - Valid | brand | | EastEnders | | Docker Who | Examples: List of the Radio Brands - Invalid | brand | | The Archers | | Noorin Khan | Example 2 # Id: OCST-1.</description>
    </item>
    
    <item>
      <title>Welcome to Mingyu Choo&#39;s Github page!</title>
      <link>https://mingyuchoo.github.io/posts/2018-08-01-welcome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2018-08-01-welcome/</guid>
      <description>You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run bundle exec jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.
To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.</description>
    </item>
    
    <item>
      <title>웹소켓(WebSocket) 둘러보기</title>
      <link>https://mingyuchoo.github.io/posts/2019-04-11-websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2019-04-11-websocket/</guid>
      <description>History Standard Features Client and Server Protocol API Client Server </description>
    </item>
    
  </channel>
</rss>
