<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>basic on mingyuchoo.github.io</title>
    <link>https://mingyuchoo.github.io/tags/basic/</link>
    <description>Recent content in basic on mingyuchoo.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://mingyuchoo.github.io/tags/basic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TypeScript Basic</title>
      <link>https://mingyuchoo.github.io/posts/2019-07-29-typescript-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mingyuchoo.github.io/posts/2019-07-29-typescript-testing/</guid>
      <description>Types Basic Types boolean number string [], Array [Type, Type] {,,,} any, any[] void undefined, null naver Boolean let isDone: boolean = false; Number let decimal: number = 6; String let color: string = &amp;#34;blue&amp;#34;; Array let list: number[] = [1, 2, 3]; let list: Array&amp;lt;number&amp;gt; = [1, 2, 3]; Tuple let x: [string, number]; Enum enum Color {Red, Green, Blue} let c Color = Color.Green; Any let notSure: any = 4; let list: any[] = [1, true, &amp;#34;free&amp;#34;]; Void let unusable: void = undefined; Null and Undefined let u: undefined = undefined; let n: null = null; Never function error(message: string): never { throw new Error(message); } function infiniteLoop(): never { while (true) { } } Object declare function create(o: object | null): void; create({ prop: 0 }); // OK create(null); // OK create(42); // Error create(&amp;#34;string&amp;#34;); // Error create(false); // Error create(undefined); // Error </description>
    </item>
    
  </channel>
</rss>
